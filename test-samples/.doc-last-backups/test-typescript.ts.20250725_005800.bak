// Test TypeScript file with interfaces and generics

interface User {
    id: number;
    name: string;
    email: string;
}

interface Product {
    id: number;
    name: string;
    price: number;
}

function findById<T extends { id: number }>(items: T[], id: number): T | undefined {
    return items.find(item => item.id === id);
}

export class UserService {
    private users: User[] = [];
    
    constructor(private readonly apiUrl: string) {}
    
    async fetchUsers(): Promise<User[]> {
        const response = await fetch(`${this.apiUrl}/users`);
        this.users = await response.json();
        return this.users;
    }
    
    getUserByEmail(email: string): User | undefined {
        return this.users.find(user => user.email === email);
    }
    
    isValidEmail(email: string): boolean {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
}

const processOrder = async (userId: number, products: Product[]): Promise<void> => {
    const total = products.reduce((sum, product) => sum + product.price, 0);
    await sendInvoice(userId, total);
};

export { findById, processOrder };
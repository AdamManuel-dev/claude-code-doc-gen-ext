#!/usr/bin/env python3
"""
Claude Code Documentation Extension - /doc-last command

Automatically generates documentation for recently modified files in your project.
Supports JavaScript/TypeScript (JSDoc) and Python (docstrings).

Usage: /doc-last [options]

Options:
  -h, --help     Show this help message
  -v, --verbose  Show detailed output
  -n, --dry-run  Show what would be done without making changes
  
Examples:
  /doc-last              # Document files from last commit
  /doc-last --dry-run    # Preview changes without modifying files
  /doc-last --verbose    # Show detailed progress
"""

import sys
import os
import argparse
import subprocess
import json
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import re
import shutil
from collections import defaultdict

# Version info
VERSION = "1.0.0"
COMMAND_NAME = "doc-last"

# Supported file extensions and their documentation styles
SUPPORTED_EXTENSIONS = {
    '.js': 'jsdoc',
    '.jsx': 'jsdoc',
    '.ts': 'jsdoc',
    '.tsx': 'jsdoc',
    '.py': 'python',
    '.pyw': 'python'
}

# Color codes for terminal output
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_help():
    """Display help information for the command."""
    print(__doc__)

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        prog=COMMAND_NAME,
        description='Generate documentation for recently modified files',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s              # Document files from last commit
  %(prog)s --dry-run    # Preview changes without modifying files
  %(prog)s --verbose    # Show detailed progress
        """
    )
    
    parser.add_argument('-v', '--verbose', 
                       action='store_true',
                       help='Show detailed output')
    
    parser.add_argument('-n', '--dry-run',
                       action='store_true',
                       help='Show what would be done without making changes')
    
    parser.add_argument('--no-enhance',
                       action='store_true',
                       help='Skip Claude Code enhancement step')
    
    parser.add_argument('--version',
                       action='version',
                       version=f'%(prog)s {VERSION}')
    
    # Additional modes
    parser.add_argument('--recent',
                       action='store_true',
                       help='Document files modified in the last 5 minutes')
    
    parser.add_argument('--staged',
                       action='store_true',
                       help='Document files currently staged in git')
    
    parser.add_argument('--all',
                       action='store_true',
                       help='Document all supported files in the project')
    
    return parser.parse_args()

def is_git_repository() -> bool:
    """Check if current directory is a git repository."""
    try:
        result = subprocess.run(['git', 'rev-parse', '--git-dir'], 
                              capture_output=True, text=True, check=False)
        return result.returncode == 0
    except FileNotFoundError:
        return False

def get_git_changed_files() -> List[str]:
    """Get list of changed files from git."""
    changed_files = []
    
    # Try to get files from last commit
    try:
        result = subprocess.run(['git', 'diff', '--name-only', 'HEAD~1', 'HEAD'],
                              capture_output=True, text=True, check=True)
        if result.stdout.strip():
            changed_files.extend(result.stdout.strip().split('\n'))
    except subprocess.CalledProcessError:
        # No previous commit or error
        pass
    
    # Also get unstaged changes
    try:
        result = subprocess.run(['git', 'diff', '--name-only'],
                              capture_output=True, text=True, check=True)
        if result.stdout.strip():
            changed_files.extend(result.stdout.strip().split('\n'))
    except subprocess.CalledProcessError:
        pass
    
    # Get staged changes
    try:
        result = subprocess.run(['git', 'diff', '--cached', '--name-only'],
                              capture_output=True, text=True, check=True)
        if result.stdout.strip():
            changed_files.extend(result.stdout.strip().split('\n'))
    except subprocess.CalledProcessError:
        pass
    
    # Remove duplicates and filter by supported extensions
    unique_files = list(set(changed_files))
    supported_files = [f for f in unique_files 
                      if Path(f).suffix.lower() in SUPPORTED_EXTENSIONS
                      and Path(f).exists()]
    
    return supported_files

def get_staged_files() -> List[str]:
    """Get files currently staged in git."""
    try:
        result = subprocess.run(['git', 'diff', '--cached', '--name-only'],
                              capture_output=True, text=True, check=True)
        if result.stdout.strip():
            files = result.stdout.strip().split('\n')
            # Filter by supported extensions
            return [f for f in files 
                   if Path(f).suffix.lower() in SUPPORTED_EXTENSIONS
                   and Path(f).exists()]
    except subprocess.CalledProcessError:
        pass
    return []

def get_all_project_files() -> List[str]:
    """Get all supported files in the project."""
    all_files = []
    
    # Search current directory and subdirectories
    for root, dirs, files in os.walk('.'):
        # Skip hidden directories and common non-code directories
        dirs[:] = [d for d in dirs if not d.startswith('.') 
                  and d not in ['node_modules', '__pycache__', 'venv', 'env', 
                               'build', 'dist', 'coverage', '.git']]
        
        for file in files:
            filepath = os.path.join(root, file)
            
            # Check if file has supported extension
            if Path(filepath).suffix.lower() in SUPPORTED_EXTENSIONS:
                # Convert to relative path
                rel_path = os.path.relpath(filepath)
                all_files.append(rel_path)
    
    return all_files

def get_recently_modified_files(minutes: int = 5) -> List[str]:
    """Get files modified in the last N minutes (fallback when not in git repo)."""
    import time
    current_time = time.time()
    cutoff_time = current_time - (minutes * 60)
    
    recent_files = []
    
    # Search current directory and subdirectories
    for root, dirs, files in os.walk('.'):
        # Skip hidden directories
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        
        for file in files:
            filepath = os.path.join(root, file)
            
            # Check if file has supported extension
            if Path(filepath).suffix.lower() not in SUPPORTED_EXTENSIONS:
                continue
            
            # Check modification time
            try:
                mtime = os.path.getmtime(filepath)
                if mtime > cutoff_time:
                    # Convert to relative path
                    rel_path = os.path.relpath(filepath)
                    recent_files.append(rel_path)
            except OSError:
                continue
    
    return recent_files

class FunctionInfo:
    """Information about a detected function or class."""
    def __init__(self, name: str, line_number: int, type: str, has_doc: bool, signature: str = ""):
        self.name = name
        self.line_number = line_number
        self.type = type  # 'function', 'class', 'method'
        self.has_doc = has_doc
        self.signature = signature

def detect_javascript_functions(filepath: str) -> List[FunctionInfo]:
    """Detect functions and classes in JavaScript/TypeScript files."""
    functions = []
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        for i, line in enumerate(lines):
            line_num = i + 1
            
            # Check for function declarations
            func_match = re.match(r'^\s*(export\s+)?(async\s+)?function\s+(\w+)\s*\((.*?)\)', line)
            if func_match:
                func_name = func_match.group(3)
                params = func_match.group(4)
                signature = f"function {func_name}({params})"
                
                # Check if previous line has JSDoc
                has_doc = i > 0 and '/**' in lines[i-1]
                
                functions.append(FunctionInfo(func_name, line_num, 'function', has_doc, signature))
            
            # Check for arrow functions
            arrow_match = re.match(r'^\s*(export\s+)?(const|let|var)\s+(\w+)\s*=\s*(\(.*?\)|[\w]+)\s*=>', line)
            if arrow_match:
                func_name = arrow_match.group(3)
                params = arrow_match.group(4)
                signature = f"const {func_name} = {params} =>"
                
                # Check if previous line has JSDoc
                has_doc = i > 0 and '/**' in lines[i-1]
                
                functions.append(FunctionInfo(func_name, line_num, 'function', has_doc, signature))
            
            # Check for class declarations
            class_match = re.match(r'^\s*(export\s+)?class\s+(\w+)', line)
            if class_match:
                class_name = class_match.group(2)
                signature = f"class {class_name}"
                
                # Check if previous line has JSDoc
                has_doc = i > 0 and '/**' in lines[i-1]
                
                functions.append(FunctionInfo(class_name, line_num, 'class', has_doc, signature))
            
            # Check for class methods (including async)
            # Exclude control flow keywords: if, for, while, switch, catch, etc.
            method_match = re.match(r'^\s+(async\s+)?(\w+)\s*\((.*?)\)\s*{', line)
            if method_match and i > 0:
                method_name = method_match.group(2)
                # Skip control flow keywords
                if method_name in ['if', 'for', 'while', 'switch', 'catch', 'try', 'do']:
                    continue
                    
                # Check if we're inside a class
                in_class = False
                for j in range(i-1, -1, -1):
                    if re.match(r'^\s*class\s+', lines[j]):
                        in_class = True
                        break
                    elif re.match(r'^}', lines[j]) and j > 0 and not lines[j-1].strip().endswith(','):
                        # This closing brace ends the class
                        break
                
                if in_class:
                    params = method_match.group(3)
                    is_async = method_match.group(1) is not None
                    prefix = "async " if is_async else ""
                    signature = f"{prefix}{method_name}({params})"
                    
                    # Check if previous line has JSDoc
                    has_doc = i > 0 and '/**' in lines[i-1]
                    
                    functions.append(FunctionInfo(method_name, line_num, 'method', has_doc, signature))
        
    except Exception as e:
        print(f"{Colors.WARNING}Warning: Could not parse {filepath}: {e}{Colors.ENDC}")
    
    return functions

def detect_python_functions(filepath: str) -> List[FunctionInfo]:
    """Detect functions and classes in Python files."""
    functions = []
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        for i, line in enumerate(lines):
            line_num = i + 1
            
            # Check for function definitions
            func_match = re.match(r'^(\s*)def\s+(\w+)\s*\((.*?)\):', line)
            if func_match:
                indent = len(func_match.group(1))
                func_name = func_match.group(2)
                params = func_match.group(3)
                signature = f"def {func_name}({params}):"
                
                # Check if next line has docstring
                has_doc = False
                if i + 1 < len(lines):
                    next_line = lines[i + 1].strip()
                    has_doc = next_line.startswith('"""') or next_line.startswith("'''")
                
                func_type = 'method' if indent > 0 else 'function'
                functions.append(FunctionInfo(func_name, line_num, func_type, has_doc, signature))
            
            # Check for class definitions
            class_match = re.match(r'^class\s+(\w+)(?:\((.*?)\))?:', line)
            if class_match:
                class_name = class_match.group(1)
                bases = class_match.group(2) or ""
                signature = f"class {class_name}({bases}):" if bases else f"class {class_name}:"
                
                # Check if next line has docstring
                has_doc = False
                if i + 1 < len(lines):
                    next_line = lines[i + 1].strip()
                    has_doc = next_line.startswith('"""') or next_line.startswith("'''")
                
                functions.append(FunctionInfo(class_name, line_num, 'class', has_doc, signature))
        
    except Exception as e:
        print(f"{Colors.WARNING}Warning: Could not parse {filepath}: {e}{Colors.ENDC}")
    
    return functions

def analyze_file(filepath: str) -> Dict[str, Any]:
    """Analyze a file for functions and documentation status."""
    ext = Path(filepath).suffix.lower()
    
    if ext in ['.js', '.jsx', '.ts', '.tsx']:
        functions = detect_javascript_functions(filepath)
    elif ext in ['.py', '.pyw']:
        functions = detect_python_functions(filepath)
    else:
        functions = []
    
    undocumented = [f for f in functions if not f.has_doc]
    
    return {
        'filepath': filepath,
        'total_functions': len(functions),
        'documented': len(functions) - len(undocumented),
        'undocumented': len(undocumented),
        'functions': functions,
        'undocumented_functions': undocumented
    }

def generate_jsdoc(func_info: FunctionInfo) -> str:
    """Generate JSDoc comment for a JavaScript function."""
    lines = ["/**"]
    
    # Add description based on function name
    func_name = func_info.name
    if func_name.startswith('get'):
        lines.append(f" * Gets the {func_name[3:].lower()}.")
    elif func_name.startswith('set'):
        lines.append(f" * Sets the {func_name[3:].lower()}.")
    elif func_name.startswith('is') or func_name.startswith('has'):
        lines.append(f" * Checks if {func_name[2:].lower()}.")
    elif func_name == 'constructor':
        lines.append(" * Creates a new instance.")
    else:
        lines.append(f" * {func_name.capitalize().replace('_', ' ')}.")
    
    # Parse parameters from signature
    params = []
    if func_info.type == 'function':
        # Extract parameters from function signature
        param_match = re.search(r'\((.*?)\)', func_info.signature)
        if param_match:
            param_str = param_match.group(1).strip()
            if param_str:
                params = [p.strip() for p in param_str.split(',')]
    elif func_info.type == 'method':
        # Extract parameters from method signature
        param_match = re.search(r'\((.*?)\)', func_info.signature)
        if param_match:
            param_str = param_match.group(1).strip()
            if param_str:
                params = [p.strip() for p in param_str.split(',')]
    
    # Add @param tags
    if params:
        for param in params:
            # Remove default values and destructuring
            param_name = param.split('=')[0].strip()
            param_name = param_name.replace('{', '').replace('}', '').strip()
            if param_name:
                lines.append(f" * @param {{*}} {param_name} - The {param_name}.")
    
    # Add @returns tag
    if func_info.type != 'class' and func_info.name != 'constructor':
        lines.append(" * @returns {*} The result.")
    
    lines.append(" */")
    
    return '\n'.join(lines)

def generate_python_docstring(func_info: FunctionInfo) -> str:
    """Generate Google-style docstring for a Python function."""
    lines = ['"""']
    
    # Add description based on function name
    func_name = func_info.name
    if func_name.startswith('get_'):
        lines.append(f"Gets the {func_name[4:].replace('_', ' ')}.")
    elif func_name.startswith('set_'):
        lines.append(f"Sets the {func_name[4:].replace('_', ' ')}.")
    elif func_name.startswith('is_') or func_name.startswith('has_'):
        lines.append(f"Checks if {func_name[3:].replace('_', ' ')}.")
    elif func_name == '__init__':
        lines.append("Initializes a new instance.")
    else:
        lines.append(f"{func_name.replace('_', ' ').capitalize()}.")
    
    # Parse parameters from signature
    params = []
    if func_info.type in ['function', 'method']:
        # Extract parameters from signature
        param_match = re.search(r'\((.*?)\):', func_info.signature)
        if param_match:
            param_str = param_match.group(1).strip()
            if param_str:
                params = [p.strip() for p in param_str.split(',')]
                # Remove 'self' for methods
                if func_info.type == 'method' and params and params[0] == 'self':
                    params = params[1:]
    
    # Add Args section
    if params:
        lines.append("")
        lines.append("Args:")
        for param in params:
            # Remove default values and type hints
            param_name = param.split('=')[0].split(':')[0].strip()
            if param_name:
                lines.append(f"    {param_name}: The {param_name.replace('_', ' ')}.")
    
    # Add Returns section
    if func_info.type != 'class' and func_info.name != '__init__':
        lines.append("")
        lines.append("Returns:")
        lines.append("    The result.")
    
    lines.append('"""')
    
    return '\n'.join(lines)

def insert_documentation(filepath: str, func_info: FunctionInfo, doc_text: str) -> bool:
    """Insert documentation at the correct position in the file."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        ext = Path(filepath).suffix.lower()
        
        # For Python files, insert docstring AFTER the function/class declaration
        if ext in ['.py', '.pyw']:
            # Find the line with the colon that ends the declaration
            insert_line = func_info.line_number - 1
            
            # Get the declaration line
            if insert_line < len(lines):
                decl_line = lines[insert_line]
                
                # Get base indentation from the declaration
                indent_match = re.match(r'^(\s*)', decl_line)
                base_indent = indent_match.group(1) if indent_match else ''
                
                # For Python, we need to add one more level of indentation
                if decl_line.strip().startswith('class'):
                    # Classes typically use 4 spaces
                    inner_indent = base_indent + '    '
                else:
                    # Functions/methods - detect indentation from next non-empty line if possible
                    inner_indent = base_indent + '    '
                    
                    # Try to detect actual indentation from the function body
                    for i in range(insert_line + 1, min(insert_line + 10, len(lines))):
                        if lines[i].strip() and not lines[i].strip().startswith('#'):
                            body_indent_match = re.match(r'^(\s*)', lines[i])
                            if body_indent_match:
                                inner_indent = body_indent_match.group(1)
                                break
                
                # Add indentation to each line of the docstring
                doc_lines = doc_text.split('\n')
                indented_doc = '\n'.join(inner_indent + line if line else '' for line in doc_lines)
                
                # Insert after the declaration line
                lines.insert(insert_line + 1, indented_doc + '\n')
            else:
                return False
        
        else:
            # For JavaScript/TypeScript, insert BEFORE the declaration (original behavior)
            insert_line = func_info.line_number - 1
            
            # Get indentation from the function/class line
            if insert_line < len(lines):
                indent_match = re.match(r'^(\s*)', lines[insert_line])
                indent = indent_match.group(1) if indent_match else ''
            else:
                indent = ''
            
            # Add indentation to each line of the documentation
            doc_lines = doc_text.split('\n')
            indented_doc = '\n'.join(indent + line if line else '' for line in doc_lines)
            
            # Insert the documentation before the declaration
            lines.insert(insert_line, indented_doc + '\n')
        
        # Write back to file
        with open(filepath, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        
        return True
        
    except Exception as e:
        print(f"{Colors.FAIL}Error inserting documentation: {e}{Colors.ENDC}")
        return False

def process_file_documentation(analysis: Dict[str, Any], dry_run: bool = False) -> Dict[str, int]:
    """Process a file and add missing documentation."""
    filepath = analysis['filepath']
    ext = Path(filepath).suffix.lower()
    
    results = {
        'processed': 0,
        'failed': 0
    }
    
    # Sort functions by line number in reverse order (bottom to top)
    # This prevents line number shifts when inserting documentation
    undocumented_funcs = sorted(analysis['undocumented_functions'], 
                               key=lambda x: x.line_number, 
                               reverse=True)
    
    for func in undocumented_funcs:
        # Generate appropriate documentation
        if ext in ['.js', '.jsx', '.ts', '.tsx']:
            doc_text = generate_jsdoc(func)
        elif ext in ['.py', '.pyw']:
            doc_text = generate_python_docstring(func)
        else:
            continue
        
        if dry_run:
            print(f"    Would add documentation for {func.type} {func.name} at line {func.line_number}")
            results['processed'] += 1
        else:
            # Don't adjust line numbers - we're processing bottom to top
            if insert_documentation(filepath, func, doc_text):
                results['processed'] += 1
            else:
                results['failed'] += 1
    
    return results

def enhance_with_claude(files: List[str], verbose: bool = False):
    """Use Claude Code CLI to enhance the generated documentation."""
    try:
        # Create a prompt file for Claude
        prompt_path = Path(".claude-doc-enhance-prompt.md")
        
        with open(prompt_path, 'w') as f:
            f.write("# Enhance Documentation\n\n")
            f.write("I've added basic JSDoc/docstring templates to the following files. ")
            f.write("Please enhance them with meaningful descriptions based on the actual code logic:\n\n")
            
            for filepath in files:
                f.write(f"## {filepath}\n")
                f.write("- Review the generated documentation\n")
                f.write("- Replace generic descriptions with specific ones based on the code\n")
                f.write("- Add @example tags for complex functions\n")
                f.write("- Add @throws tags where appropriate\n")
                f.write("- For classes, add detailed descriptions of their purpose\n")
                f.write("- Ensure parameter descriptions are meaningful\n")
                f.write("- Update return descriptions to be specific about what's returned\n\n")
            
            f.write("Guidelines:\n")
            f.write("- Keep descriptions concise but informative\n")
            f.write("- Use proper grammar and punctuation\n")
            f.write("- Focus on the 'why' and 'what' rather than the 'how'\n")
            f.write("- Add type information where it's not obvious\n")
            f.write("- Include edge cases in descriptions where relevant\n")
        
        # Prepare the claude command
        claude_cmd = ['claude']
        
        # Add files to the command
        for filepath in files:
            claude_cmd.extend(['-f', filepath])
        
        # Add the prompt file
        claude_cmd.extend(['-f', str(prompt_path)])
        
        # Add the instruction
        claude_cmd.append("Please enhance the documentation in the files listed in the prompt. Focus on making the descriptions meaningful and specific to the actual code implementation.")
        
        if verbose:
            print(f"{Colors.BLUE}Running: {' '.join(claude_cmd)}{Colors.ENDC}")
        
        # Execute Claude Code
        print(f"{Colors.CYAN}Calling Claude Code to enhance documentation...{Colors.ENDC}")
        result = subprocess.run(claude_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"{Colors.GREEN}✓ Claude Code successfully enhanced the documentation{Colors.ENDC}")
            
            # Clean up prompt file
            if prompt_path.exists():
                prompt_path.unlink()
        else:
            print(f"{Colors.WARNING}⚠️  Claude Code enhancement failed{Colors.ENDC}")
            if result.stderr:
                print(f"{Colors.FAIL}Error: {result.stderr}{Colors.ENDC}")
            
            # Check if claude command exists
            check_claude = subprocess.run(['which', 'claude'], capture_output=True)
            if check_claude.returncode != 0:
                print(f"{Colors.CYAN}Note: 'claude' command not found. Make sure Claude Code CLI is installed.{Colors.ENDC}")
                print(f"{Colors.CYAN}You can manually run: claude -f <file1> -f <file2> ... with a documentation enhancement prompt{Colors.ENDC}")
    
    except Exception as e:
        print(f"{Colors.WARNING}Could not enhance with Claude Code: {e}{Colors.ENDC}")
        print(f"{Colors.CYAN}You can manually enhance the documentation using Claude Code CLI{Colors.ENDC}")

def main():
    """Main entry point for the doc-last command."""
    try:
        # Parse arguments
        args = parse_arguments()
        
        # Print header
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}Claude Code Documentation Generator v{VERSION}{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}\n")
        
        # Detect files to process based on mode
        files_to_process = []
        
        if args.all:
            print(f"{Colors.CYAN}🔍 Getting all supported files in the project...{Colors.ENDC}")
            files_to_process = get_all_project_files()
            if args.verbose:
                print(f"{Colors.BLUE}  Found {len(files_to_process)} total files{Colors.ENDC}")
        
        elif args.staged:
            print(f"{Colors.CYAN}🔍 Detecting staged files...{Colors.ENDC}")
            if is_git_repository():
                files_to_process = get_staged_files()
                if not files_to_process:
                    print(f"{Colors.WARNING}  No staged files found{Colors.ENDC}")
            else:
                print(f"{Colors.FAIL}  Error: Not a git repository{Colors.ENDC}")
                return
        
        elif args.recent:
            print(f"{Colors.CYAN}🔍 Detecting recently modified files (last 5 minutes)...{Colors.ENDC}")
            files_to_process = get_recently_modified_files()
        
        else:
            # Default mode: last commit or recent files
            print(f"{Colors.CYAN}🔍 Detecting recently modified files...{Colors.ENDC}")
            
            if is_git_repository():
                if args.verbose:
                    print(f"{Colors.BLUE}  Git repository detected{Colors.ENDC}")
                files_to_process = get_git_changed_files()
                
                if not files_to_process:
                    print(f"{Colors.WARNING}  No changed files in git, checking recently modified files...{Colors.ENDC}")
                    files_to_process = get_recently_modified_files()
            else:
                if args.verbose:
                    print(f"{Colors.BLUE}  Not a git repository, checking recently modified files...{Colors.ENDC}")
                files_to_process = get_recently_modified_files()
        
        if not files_to_process:
            print(f"\n{Colors.WARNING}No files found that need documentation.{Colors.ENDC}")
            print(f"{Colors.CYAN}Try modifying some .js, .ts, or .py files and run this command again.{Colors.ENDC}")
            return
        
        # Display files found
        print(f"\n{Colors.GREEN}✓ Found {len(files_to_process)} file(s) to process:{Colors.ENDC}")
        for file in files_to_process:
            ext = Path(file).suffix.lower()
            doc_type = SUPPORTED_EXTENSIONS.get(ext, 'unknown')
            print(f"  📄 {file} ({doc_type})")
        
        # Analyze files for documentation needs
        print(f"\n{Colors.CYAN}📊 Analyzing files for documentation needs...{Colors.ENDC}")
        
        files_analysis = []
        total_undocumented = 0
        
        for file in files_to_process:
            if args.verbose:
                print(f"  Analyzing {file}...")
            
            analysis = analyze_file(file)
            files_analysis.append(analysis)
            total_undocumented += analysis['undocumented']
        
        # Display analysis results
        print(f"\n{Colors.BOLD}Documentation Analysis Results:{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        
        for analysis in files_analysis:
            filepath = analysis['filepath']
            total = analysis['total_functions']
            documented = analysis['documented']
            undocumented = analysis['undocumented']
            
            if undocumented > 0:
                status_color = Colors.FAIL
                status_icon = "❌"
            else:
                status_color = Colors.GREEN
                status_icon = "✅"
            
            print(f"\n{Colors.BOLD}{filepath}:{Colors.ENDC}")
            print(f"  Total functions/classes: {total}")
            print(f"  {Colors.GREEN}Documented: {documented}{Colors.ENDC}")
            print(f"  {status_color}Undocumented: {undocumented} {status_icon}{Colors.ENDC}")
            
            if args.verbose and analysis['undocumented_functions']:
                print(f"  {Colors.WARNING}Missing documentation:{Colors.ENDC}")
                for func in analysis['undocumented_functions']:
                    print(f"    - Line {func.line_number}: {func.type} {func.name}")
        
        print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}Summary:{Colors.ENDC}")
        print(f"  Total files: {len(files_to_process)}")
        print(f"  {Colors.FAIL if total_undocumented > 0 else Colors.GREEN}Total undocumented functions: {total_undocumented}{Colors.ENDC}")
        
        if total_undocumented == 0:
            print(f"\n{Colors.GREEN}✅ All functions are documented! Great job!{Colors.ENDC}")
            return
        
        if args.dry_run:
            print(f"\n{Colors.BLUE}Dry run mode - no files will be modified{Colors.ENDC}")
            print(f"{Colors.CYAN}Would generate documentation for {total_undocumented} functions:{Colors.ENDC}\n")
            for analysis in files_analysis:
                if analysis['undocumented'] > 0:
                    print(f"{Colors.BOLD}{analysis['filepath']}:{Colors.ENDC}")
                    process_file_documentation(analysis, dry_run=True)
            return
        
        # Process documentation generation
        print(f"\n{Colors.CYAN}📝 Generating documentation...{Colors.ENDC}")
        
        # Create backups
        print(f"{Colors.BLUE}Creating backups...{Colors.ENDC}")
        backup_dir = Path(".doc-last-backups")
        backup_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        for analysis in files_analysis:
            if analysis['undocumented'] > 0:
                filepath = Path(analysis['filepath'])
                backup_path = backup_dir / f"{filepath.name}.{timestamp}.bak"
                shutil.copy2(filepath, backup_path)
                if args.verbose:
                    print(f"  Backed up {filepath} to {backup_path}")
        
        # Process each file
        total_processed = 0
        total_failed = 0
        
        for analysis in files_analysis:
            if analysis['undocumented'] > 0:
                filepath = analysis['filepath']
                print(f"\n{Colors.BOLD}Processing {filepath}...{Colors.ENDC}")
                
                results = process_file_documentation(analysis, dry_run=False)
                total_processed += results['processed']
                total_failed += results['failed']
                
                if results['processed'] > 0:
                    print(f"  {Colors.GREEN}✓ Added documentation for {results['processed']} functions{Colors.ENDC}")
                if results['failed'] > 0:
                    print(f"  {Colors.FAIL}✗ Failed to document {results['failed']} functions{Colors.ENDC}")
        
        # Generate final report
        print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}Documentation Generation Complete!{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}\n")
        
        print(f"{Colors.GREEN}✅ Successfully documented {total_processed} functions{Colors.ENDC}")
        if total_failed > 0:
            print(f"{Colors.FAIL}❌ Failed to document {total_failed} functions{Colors.ENDC}")
        
        print(f"\n{Colors.CYAN}Backups saved in: {backup_dir}{Colors.ENDC}")
        
        # Create documentation report
        report_path = Path("documentation-report.md")
        with open(report_path, 'w') as f:
            f.write(f"# Documentation Report\n\n")
            f.write(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"## Summary\n\n")
            f.write(f"- Total files processed: {len([a for a in files_analysis if a['undocumented'] > 0])}\n")
            f.write(f"- Functions documented: {total_processed}\n")
            f.write(f"- Functions failed: {total_failed}\n\n")
            f.write(f"## Files Processed\n\n")
            
            for analysis in files_analysis:
                if analysis['undocumented'] > 0:
                    f.write(f"### {analysis['filepath']}\n")
                    f.write(f"- Functions documented: {analysis['undocumented']}\n\n")
        
        print(f"{Colors.CYAN}Report saved to: {report_path}{Colors.ENDC}")
        
        # Use Claude Code to enhance documentation
        if total_processed > 0 and not args.no_enhance:
            print(f"\n{Colors.CYAN}🤖 Using Claude Code to enhance documentation...{Colors.ENDC}")
            
            # Prepare files list for Claude
            files_to_enhance = []
            for analysis in files_analysis:
                if analysis['undocumented'] > 0:
                    files_to_enhance.append(analysis['filepath'])
            
            if files_to_enhance:
                enhance_with_claude(files_to_enhance, args.verbose)
        elif args.no_enhance:
            print(f"\n{Colors.BLUE}Skipping Claude Code enhancement (--no-enhance flag){Colors.ENDC}")
        
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}Operation cancelled by user{Colors.ENDC}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Colors.FAIL}Error: {str(e)}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()